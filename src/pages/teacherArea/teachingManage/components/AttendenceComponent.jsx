import React, { useEffect, useState } from "react";
import { Table, Input, Space, Select, Button, message } from "antd";
import { SearchOutlined, DeleteFilled } from "@ant-design/icons";
import AttendanceService from "../../../../services/attendanceService";
import getCurrentYear from "../../../../utils/year.util";
import { toast } from "react-toastify";

const { schoolYear, listYear, semester } = getCurrentYear();
const { Option } = Select;
const currentDate = new Date();
const timeStamp = `${currentDate.getFullYear()}-${(currentDate.getMonth() + 1).toString().padStart(2, "0")}-${currentDate.getDate().toString().padStart(2, "0")}`

const AttendenceComponent = ({ studentData, classId, subjectName, subjectId}) => {
  const [searchText, setSearchText] = useState("");
  const [filteredData, setFilteredData] = useState([]);
  const [sortOrder, setSortOrder] = useState(null);

  // üéØ T√≠ch h·ª£p API getAttendanceByClassId khi m·ªü comp
  useEffect(() => {
    const fetchData = async () => {
      try {
        // G·ªçi API l·∫•y d·ªØ li·ªáu ƒëi·ªÉm danh c√≥ s·∫µn
        const { data: apiData } = await AttendanceService.GetAttendanceByClassAndDate({classId, date: timeStamp, year: schoolYear});
        const attendanceMap = {};
        apiData.forEach((item) => {
          attendanceMap[item.studentsId] = item;
        });

        // K·∫øt h·ª£p d·ªØ li·ªáu studentData v·ªõi d·ªØ li·ªáu API
        const enhancedData = studentData.map((student) => {
          const attendance = attendanceMap[student.id];
          return {
            ...student,
            absence: attendance
              ? attendance.isExcused
                ? "C√≥ ph√©p"
                : attendance.isUnexcused
                ? "Kh√¥ng ph√©p"
                : "Kh√¥ng"
              : "Kh√¥ng",
            note: attendance ? attendance.attendance_Note : "",
            learning: "", // N·∫øu c√≥ tr∆∞·ªùng learning trong API th√¨ th√™m v√†o ƒë√¢y
            attendanceId: attendance ? attendance.attendance_Id : null,
          };
        });
        setFilteredData(enhancedData);
      } catch (error) {
        console.error("L·ªói khi l·∫•y d·ªØ li·ªáu ƒëi·ªÉm danh t·ª´ API:", error);
        // N·∫øu l·ªói, v·∫´n gi·ªØ d·ªØ li·ªáu m·∫∑c ƒë·ªãnh t·ª´ studentData
        const fallbackData = studentData.map((student) => ({
          ...student,
          absence: "Kh√¥ng",
          note: "",
          learning: "",
        }));
        setFilteredData(fallbackData);
      }
    };

    fetchData();
  }, [studentData, classId]);

  const handleSearch = (e) => {
    const value = e.target.value.toLowerCase();
    setSearchText(value);
    const filtered = filteredData.filter(
      (student) =>
        student.code.toLowerCase().includes(value) ||
        student.fullName.toLowerCase().includes(value)
    );
    setFilteredData(filtered);
  };

  const handleSort = () => {
    const newOrder = sortOrder === "ascend" ? "descend" : "ascend";
    setSortOrder(newOrder);
    const sortedData = [...filteredData].sort((a, b) =>
      newOrder === "ascend" ? a.code.localeCompare(b.code) : b.code.localeCompare(a.code)
    );
    setFilteredData(sortedData);
  };

  const handleChange = (value, record, field) => {
    const updatedData = filteredData.map((item) =>
      item.id === record.id ? { ...item, [field]: value } : item
    );
    setFilteredData(updatedData);
  };

  const handleDeleteAttendance = (attendanceId) => () => {
    try{
        const {data} = AttendanceService.DeleteAttendanceById(attendanceId);
        toast.success("X√≥a ƒëi·ªÉm danh th√†nh c√¥ng!");
    }catch (error) {
      console.error("L·ªói khi x√≥a ƒëi·ªÉm danh:", error);
      message.error("ƒê√£ x·∫£y ra l·ªói khi x√≥a ƒëi·ªÉm danh. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  }

  const handleSubmit = async () => {
    const attendance = filteredData
      .filter((item) => item.absence !== "Kh√¥ng" || item.note.trim() !== "")
      .map((item) => ({
        isExcused: item.absence === "C√≥ ph√©p",
        isUnexcused: item.absence === "Kh√¥ng ph√©p",
        attendance_Note: item.note,
        studentsId: item.id,
      }));

    const finalData = {
      Attendance_Year: schoolYear,
      Attendance_Semester: semester,
      Attendance_Timestamp: timeStamp,
      Attendance_SubjectName: subjectName,
      Attendance_SubjectId: subjectId,
      Attendance: attendance,
    };

    try {
      const { data } = await AttendanceService.CreateListAttendance(finalData);
      toast.success("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!");
    } catch (error) {
      console.error("L·ªói khi g·ª≠i d·ªØ li·ªáu:", error);
      message.error("ƒê√£ x·∫£y ra l·ªói khi g·ª≠i d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  const columns = [
    {
      title: "STT",
      dataIndex: "index",
      key: "index",
      render: (text, record, index) => index + 1,
    },
    {
      title: (
        <div className="flex justify-between">
          M√£ h·ªçc sinh
          <span onClick={handleSort} className="cursor-pointer ml-2">
            {sortOrder === "ascend" ? "üîº" : "üîΩ"}
          </span>
        </div>
      ),
      dataIndex: "code",
      key: "code",
    },
    {
      title: "T√™n h·ªçc sinh",
      dataIndex: "fullName",
      key: "fullName",
    },
    {
      title: "V·∫Øng m·∫∑t",
      dataIndex: "absence",
      key: "absence",
      render: (text, record) => (
        <Select
          value={record.absence}
          onChange={(value) => handleChange(value, record, "absence")}
          style={{ width: 120 }}
        >
          <Option value="Kh√¥ng">
            <span style={{ color: "green", fontWeight: 500 }}>Kh√¥ng</span>
          </Option>
          <Option value="C√≥ ph√©p">
            <span style={{ color: "blue", fontWeight: 500 }}>C√≥ ph√©p</span>
          </Option>
          <Option value="Kh√¥ng ph√©p">
            <span style={{ color: "red", fontWeight: 500 }}>Kh√¥ng ph√©p</span>
          </Option>
        </Select>
      ),
    },
    {
      title: "Ghi ch√∫",
      dataIndex: "note",
      key: "note",
      render: (text, record) => (
        <Input
          value={record.note}
          onChange={(e) => handleChange(e.target.value, record, "note")}
          placeholder="Nh·∫≠p ghi ch√∫"
        />
      ),
    },
    {
      title: "H√†nh ƒë·ªông",
      render: (text, record) => (
      <Button style={{color: "red", border: "none"}} onClick={handleDeleteAttendance(record.attendanceId)}>
        <DeleteFilled />
      </Button>
      ),
    }
  ];

  return (
    <div>
      <Space style={{ marginBottom: 16, display: "flex", justifyContent: "space-between" }}>
        <Input
          prefix={<SearchOutlined />}
          placeholder="T√¨m ki·∫øm m√£ s·ªë ho·∫∑c t√™n h·ªçc sinh..."
          value={searchText}
          onChange={handleSearch}
          allowClear
        />
        <h2 className="mr-2 font-medium text-base italic text-green-600">
          Ng√†y {currentDate.getDate()} th√°ng {currentDate.getMonth() + 1} nƒÉm {currentDate.getFullYear()}
        </h2>
      </Space>
      <Table columns={columns} dataSource={filteredData} rowKey="id" pagination={{ pageSize: 10 }} />
      <div style={{ marginTop: 16, textAlign: "right" }}>
        <Button type="primary" onClick={handleSubmit}>G·ª≠i</Button>
      </div>
    </div>
  );
};

export default AttendenceComponent;
