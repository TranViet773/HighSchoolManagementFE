import { toast } from "react-toastify";
import axiosInstance from "../tools/axios.tool";
import { data } from "react-router-dom";
const ScoreService = {
    async GetScoreOfSubject({studentId, year, semester, subjectId}){
        try{
            const response = await axiosInstance.get(`/Score/subject/${studentId}`,{
                params: { year, studentId, semester, subjectId }
            });
            return { data: response.data, status: response.code };
        }catch(error){
            console.error("error: " + error);
            toast.error("L·ªói: " + error);
        }
    },

    async GetScoreBoard({studentId, year, semester}){
        try{
            semester = parseInt(semester, 10);
            console.log(semester);
            const response = await axiosInstance.get(`/Score/semester/${semester}`, {
                params: { year, studentId } // üëà Truy·ªÅn v√†o query parameters
            });
            return { data: response.data, status: response.code };
        }catch(error){
            console.error("error: " + error);
            toast.error("L·ªói: " + error);
        }
    },

    async InitializeScoreBoard({ studentId, year, semester }) {
        try {
            const response = await axiosInstance.post("/Score/scoreboard", null, {
                params: { studentId, year, semester }
            });
    
            return { data: response.data, status: response.status };
        } catch (e) {
            console.error("error: " + e);
            toast.error("L·ªói: " + e.message);
            return { data: null, status: 500 }; // Tr·∫£ v·ªÅ l·ªói m·∫∑c ƒë·ªãnh
        }
    },
    //L·∫•y danh s√°ch ƒëi·ªÉm s·ªë 1 m√¥n h·ªçc c·ªßa c√°c h·ªçc sinh h·ªçc t·∫°i l·ªõp n√†o ƒë√≥.
    async GetScoreBySubject({ subjectId, year, semester, studentIds }) {
        try {
            const response = await axiosInstance.post(
                `/Score/teacher/subject/${subjectId}?year=${year}&semester=${semester}`, 
                studentIds  // Truy·ªÅn danh s√°ch v√†o body
            );
            return { data: response.data, status: response.status };
        } catch (e) {
            toast.error("L·ªói khi l·∫•y ƒëi·ªÉm.");
            return { data: null, status: e.response?.status };
        }
    },

    //C·∫≠p nh·∫≠t ƒëi·ªÉm 1 c·ªôt - 1 m√¥n - nhi·ªÅu h·ªçc (gi√°o vi√™n b·ªô m√¥n ch·∫•m ƒëi·ªÉm)
    async UpdateScoreOfSubjectByColumn({subjectId, year, semester, scores}){
        try{
            console.log("data servie")
            console.log(scores)
            const response = await axiosInstance.put(`/Score/subject/${subjectId}?year=${year}&semester=${semester}`,scores);
            return {data: response.data, status: response.status}
        }catch(e){
            toast.error("L·ªói khi c·∫≠p nh·∫≠t ƒëi·ªÉm")
            console.log("L·ªói trong qu√° tr√¨nh c·∫≠p nh·∫≠t ƒëi·ªÉm: " + e);
        }
    },

    async GetResultFinalTerm({studentId, year, semester}){
        try{
            const response = await axiosInstance.get(`/Score/semester/${semester}?year=${year}&studentId=${studentId}`);
            return {data: response.data, status: response.status}
        }catch(e){
            console.log("L·ªói trong qu√° tr√¨nh l·∫•y duwxx li·ªáu: " + e);
        }

    }
    
    
    

}
export default ScoreService;